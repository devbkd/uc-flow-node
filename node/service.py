import ujson
from typing import List, Tuple

from uc_flow_nodes.schemas import NodeRunContext
from uc_flow_nodes.service import NodeService
from uc_flow_nodes.views import info, execute
from uc_flow_schemas import flow
from uc_flow_schemas.flow import Property, CredentialProtocol, RunState
from uc_http_requester.requester import Request


class NodeType(flow.NodeType):
    id: str = 'fe19a64a-c274-412d-a6e8-66b9639e1f3a'
    type: flow.NodeType.Type = flow.NodeType.Type.action
    name: str = 'GoogleExtension'
    displayName: str = 'GoogleExtension'
    icon: str = '<svg><text x="8" y="50" font-size="50">ü§ñ</text></svg>'
    description: str = 'GoogleExtension'
    properties: List[Property] = [
        Property(
            displayName='–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ',
            name='text_field',
            type=Property.Type.STRING,
            placeholder='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç',
            description='–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö',
            required=True,
            default='Test data',
        ),
        Property(
            displayName='–ß–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ',
            name='number_field',
            type=Property.Type.NUMBER,
            placeholder='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ',
            description='–ß–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö',
            required=True,
            default=0,
        ),
        Property(
            displayName='–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å',
            name='field_type',
            type=Property.Type.BOOLEAN,
            placeholder='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—è',
            description='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—è: –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ '
            '–±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ —á–∏—Å–ª–æ; –µ—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ ‚Äî –∫–∞–∫ —Ç–µ–∫—Å—Ç.',
            required=True,
            default=False,
        ),
    ]


class InfoView(info.Info):
    class Response(info.Info.Response):
        node_type: NodeType


class ExecuteView(execute.Execute):
    async def post(self, json: NodeRunContext) -> NodeRunContext:
        try:
            text_field = json.node.data.properties.get('text_field', '')
            number_field = json.node.data.properties.get('number_field', 0)
            field_type = json.node.data.properties.get('field_type', False)
            result = None

            if field_type:
                try:
                    text_field_as_number = int(text_field)
                    result = text_field_as_number + number_field
                except ValueError:
                    raise ValueError(
                        '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –≤ —á–∏—Å–ª–æ.'
                    )
            else:
                result = text_field + str(number_field)
            await json.save_result({"result": result})
            json.state = RunState.complete
        except Exception as e:
            self.log.warning(f'Error {e}')
            await json.save_error(str(e))
            json.state = RunState.error
        return json


class Service(NodeService):
    class Routes(NodeService.Routes):
        Info = InfoView
        Execute = ExecuteView
